else if (regional_data$Date[i] %in% summer) {
regional_data$Season[i] = "Summer"
}
else if (regional_data$Date[i] %in% monsoon) {
regional_data$Season[i] = "Monsoon"
}
i = i + 1
}
# Master Plot
base_line_plot = ggplot(regional_data, mapping = aes(x = Date, y = Confirmed))
# Overall Graph
base_line_plot + geom_smooth(color = "#C70039", se = FALSE) +
facet_wrap(~ WHO.Region, nrow = 2, scales = c("free")) +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 90)) +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
labs(x = "", y = "Confirmed Cases")
# Seasonal Graph
base_line_plot + geom_smooth(mapping = aes(color = Season), se = FALSE) +
facet_wrap(~ WHO.Region, nrow = 2, scales = c("free")) +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 90)) +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
labs(x = "", y = "Confirmed Cases")
africa = filter(regional_data, WHO.Region == 'Africa')
americas = filter(regional_data, WHO.Region == 'Americas')
eastern_mediterranean = filter(regional_data, WHO.Region == 'Eastern Mediterranean')
europe = filter(regional_data, WHO.Region == 'Europe')
south_east_asia = filter(regional_data, WHO.Region == 'South-East Asia')
western_pacific = filter(regional_data, WHO.Region == 'Western Pacific')
## Correlation Tests: Ran loop and appended the results to lists.
deathtorecovery = list()
activetodeath = list()
counter = 0
for (df in list(africa, americas, eastern_mediterranean, europe, south_east_asia, western_pacific)) {
counter = counter + 1
eval(parse(text = paste(str_replace_all(as.character(df[1,1]), "[' '-]", ""), "_deaths = unlist(df$Deaths)", sep = "")))
eval(parse(text = paste(str_replace_all(as.character(df[1,1]), "[' '-]", ""), "_recovered = unlist(df$Recovered)", sep = "")))
eval(parse(text = paste(str_replace_all(as.character(df[1,1]), "[' '-]", ""), "_active = unlist(df$Active)", sep = "")))
eval(parse(text =
paste("deathtorecovery[[counter]] = cor.test(",
paste(str_replace_all(as.character(df[1,1]), "[' '-]", ""), "_deaths", sep = ""),
", ",
paste(str_replace_all(as.character(df[1,1]), "[' '-]", ""), "_recovered", sep = ""),
", method = 'pearson'",
")",
sep = ""
)
))
eval(parse(text =
paste("activetodeath[[counter]] = cor.test(",
paste(str_replace_all(as.character(df[1,1]), "[' '-]", ""), "_active", sep = ""),
", ",
paste(str_replace_all(as.character(df[1,1]), "[' '-]", ""), "_deaths", sep = ""),
", method = 'pearson'",
")",
sep = ""
)
))
}
deathtorecovery
activetodeath
region_hypo = cleaned_data %>% filter(WHO.Region == "South-East Asia")
region_hypo["Recovery Rate"] = region_hypo$Recovered/(region_hypo$Recovered + region_hypo$Deaths) # Recovery Rate = Recovered/(Recovery + Deaths)
# Filtering Date on 01-06-2020
data_june_one = region_hypo %>% filter(Date == as.Date("2020-06-01"))
# Filtering data from 22-01-2020 to 31-05-2020 and finding mean recovery rate
prev_period_data = region_hypo %>% filter(Date >= as.Date("2020-01-22") & Date <= as.Date("2020-05-31"))
mean_prev_period = mean(prev_period_data$`Recovery Rate`)
# Performing t-test
t.test(data_june_one$`Recovery Rate`, mu = mean_prev_period)
# Filtering for March and June and taking mean deaths for June
march2020 = region_hypo %>% filter(Date >= as.Date("2020-03-01") & Date <= as.Date("2020-03-31"))
june2020 = region_hypo %>% filter(Date >= as.Date("2020-06-01") & Date <= as.Date("2020-06-30"))
mean_june2020 = mean(june2020$Deaths)
t.test(march2020$Deaths, mu = mean_june2020, alternative = "greater")
# Region Wise QQ Plot from Regional Dataset
ggplot(regional_data, aes(sample = regional_data$Deaths)) +
stat_qq(colour = colfunc(1128)) +
geom_qq_line(colour = colfunc1(12)) +
facet_wrap(~ WHO.Region, nrow = 2, scales = c("free")) +
theme_bw() +
theme(strip.background = element_rect(colour="black", fill="white")) +
labs(y = "Deaths")
colfunc1 = colorRampPalette(c("red", "yellow"))
# Region Wise QQ Plot from Regional Dataset
ggplot(regional_data, aes(sample = regional_data$Deaths)) +
stat_qq(colour = colfunc(1128)) +
geom_qq_line(colour = colfunc1(12)) +
facet_wrap(~ WHO.Region, nrow = 2, scales = c("free")) +
theme_bw() +
theme(strip.background = element_rect(colour="black", fill="white")) +
labs(y = "Deaths")
# Country Wise QQ Plot from Original dataset
ggplot(cleaned_data, aes(sample = cleaned_data$Deaths)) +
stat_qq() +
geom_qq_line() +
facet_wrap(~ Country.Region, scales = c("free")) +
labs(y = "Deaths")
# Region Wise QQ Plot from Original dataset
ggplot(cleaned_data, aes(sample = cleaned_data$Deaths)) +
stat_qq(colour = colfunc(35156)) +
geom_qq_line(colour = colfunc1(12)) +
facet_wrap(~ WHO.Region, nrow = 2, scales = c("free")) +
theme_bw() +
theme(strip.background = element_rect(colour="black", fill="white")) +
labs(y = "Deaths")
# Preparing Model using Regional Dataset
deaths_model = lm(Deaths ~ WHO.Region + Date, data = regional_data) # Parameters here are Region and Date
# Preparing Model using Regional Dataset
deaths_model = lm(Deaths ~ WHO.Region + Date, data = regional_data)
summary(deaths_model)
# Parameters here are Region and Date
new_data = data.frame(WHO.Region = unique(regional_data$WHO.Region))
# Prediction
list_africa = vector("numeric", 0) # Making lists to store daily predictions
list_america = vector("numeric", 0)
list_east_mediterranean = vector("numeric", 0)
list_europe = vector("numeric", 0)
list_southeast_asia = vector("numeric", 0)
list_west_pacific = vector("numeric", 0)
dates = c(
"2020-08-01", "2020-08-02", "2020-08-03", "2020-08-04", "2020-08-05", "2020-08-06", "2020-08-07", "2020-08-08",
"2020-08-09", "2020-08-10", "2020-08-11", "2020-08-12", "2020-08-13", "2020-08-14", "2020-08-15", "2020-08-16",
"2020-08-17", "2020-08-18", "2020-08-19", "2020-08-20", "2020-08-21", "2020-08-22", "2020-08-23", "2020-08-24",
"2020-08-25", "2020-08-26", "2020-08-27", "2020-08-28", "2020-08-29", "2020-08-30"
)
# Looping through predictions on each day and appending to the list
for (d in dates) {
new_data["Date"] = as.Date(d)
prediction = predict.lm(deaths_model, newdata = new_data)
list_africa = c(list_africa, as.numeric(prediction[1]))
list_america = c(list_america, as.numeric(prediction[2]))
list_east_mediterranean = c(list_east_mediterranean, as.numeric(prediction[3]))
list_europe = c(list_europe, as.numeric(prediction[4]))
list_southeast_asia = c(list_southeast_asia, as.numeric(prediction[5]))
list_west_pacific = c(list_west_pacific, as.numeric(prediction[6]))
}
# Taking sum of daily predictions for each region to get total predicted deaths for October.
aug_prediction = c(
sum(list_africa),
sum(list_america),
sum(list_east_mediterranean),
sum(list_europe),
sum(list_southeast_asia),
sum(list_west_pacific)
)
aug_prediction
# Residual Analysis
ggplot(regional_data, mapping = aes(x = regional_data$Date, y = deaths_model$residuals)) +
geom_point(colour = colfunc(1128)) +
facet_wrap(~ WHO.Region, nrow = 2, scales = c("free")) +
theme_bw() +
theme(strip.background = element_rect(colour="black", fill="white")) +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
labs(x = "Date", y = "Deaths")
## Pie Charts
pie_data = regional_data %>% group_by(across(c("WHO.Region"))) %>%
summarise(
Deaths = sum(Deaths),
Confirmed = sum(Confirmed),
Recovered = sum(Recovered),
Active = sum(Active)
)
# Deaths
ggplot(pie_data, aes(x="", y=Deaths, fill=WHO.Region)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) +
ggtitle("Deaths") +
labs(x = "", y = "") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5))
# Confirmed
ggplot(pie_data, aes(x="", y=Confirmed, fill=WHO.Region)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) +
ggtitle("Confirmed") +
labs(x = "", y = "") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5))
# Active
ggplot(pie_data, aes(x="", y=Active, fill=WHO.Region)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) +
ggtitle("Active") +
labs(x = "", y = "") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5))
# Recovered
ggplot(pie_data, aes(x="", y=Recovered, fill=WHO.Region)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) +
ggtitle("Recovered") +
labs(x = "", y = "") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5))
# Making predictions for confirmed cases for August 2020.
cases_model = lm(Confirmed ~ WHO.Region + Date, data = regional_data)
# Making predictions for confirmed cases for August 2020.
cases_model = lm(Confirmed ~ WHO.Region + Date, data = regional_data)
new_data_c = data.frame(WHO.Region = unique(regional_data$WHO.Region))
list_africa_cases = vector("numeric", 0) # Making lists to store daily predictions
list_america_cases = vector("numeric", 0)
list_east_mediterranean_cases = vector("numeric", 0)
list_europe_cases = vector("numeric", 0)
list_southeast_asia_cases = vector("numeric", 0)
list_west_pacific_cases = vector("numeric", 0)
dates_c = c(
"2020-08-01", "2020-08-02", "2020-08-03", "2020-08-04", "2020-08-05", "2020-08-06", "2020-08-07", "2020-08-08",
"2020-08-09", "2020-08-10", "2020-08-11", "2020-08-12", "2020-08-13", "2020-08-14", "2020-08-15", "2020-08-16",
"2020-08-17", "2020-08-18", "2020-08-19", "2020-08-20", "2020-08-21", "2020-08-22", "2020-08-23", "2020-08-24",
"2020-08-25", "2020-08-26", "2020-08-27", "2020-08-28", "2020-08-29", "2020-08-30"
)
# Looping through predictions on each day and appending to the list
for (d in dates_c) {
new_data_c["Date"] = as.Date(d)
prediction = predict.lm(cases_model, newdata = new_data)
list_africa_cases = c(list_africa_cases, as.numeric(prediction[1]))
list_america_cases = c(list_america_cases, as.numeric(prediction[2]))
list_east_mediterranean_cases = c(list_east_mediterranean_cases, as.numeric(prediction[3]))
list_europe_cases = c(list_europe_cases, as.numeric(prediction[4]))
list_southeast_asia_cases = c(list_southeast_asia_cases, as.numeric(prediction[5]))
list_west_pacific_cases = c(list_west_pacific_cases, as.numeric(prediction[6]))
}
# Taking sum of daily predictions for each region to get total predicted deaths for August.
aug_prediction_c = c(
sum(list_africa_cases),
sum(list_america_cases),
sum(list_east_mediterranean_cases),
sum(list_europe_cases),
sum(list_southeast_asia_cases),
sum(list_west_pacific_cases)
)
aug_prediction_c
# Making the dataframe for confirmed cases in August and May
regions = c("Africa", "Americas", "Eastern Mediterranean", "Europe", "South-East Asia", "Western Pacific")
august_cases = data.frame(WHO.Region = rep(regions, times = rep(30, 6)),
Date = rep(dates_c, 6),
Confirmed = c(
list_africa_cases,
list_america_cases,
list_east_mediterranean_cases,
list_europe_cases,
list_southeast_asia_cases,
list_west_pacific_cases
))
may_cases = regional_data %>% filter(Date >= as.Date("2020-05-01"), Date <= as.Date("2020-05-30"))
View(august_cases)
?anova
# Correlation between Confirmed and Active
regional_correlations = vector("numeric", 0)
for (region in regions) {
cor_data = regional_data %>% filter(WHO.Region == region)
regional_correlations = c(regional_correlations, cor(cor_data$Confirmed, cor_data$Active))
}
regional_correlations
ggplot(cleaned_data, mapping = aes(x = Confirmed, y = Active)) +
geom_point(color = "#FA8072") +
geom_line(color = "blue", linetype = 1) +
facet_wrap(~ WHO.Region, nrow = 2, scales = c("free")) +
theme_bw() +
labs(x = "Confirmed Cases", y = "Active Cases") +
ggtitle("Active Cases vs Confirmed Cases") +
theme(plot.title = element_text(hjust = 0.5), strip.background = element_rect(colour="black", fill="white")) +
scale_x_continuous(labels = comma) +
scale_y_continuous(labels = comma)
library(tidyverse)
library(MASS)
## Reading the csv file
insurance_data<- read.csv(file.choose())
head(insurance_data)
## data cleaning
data=insurance_data
data$age= as.numeric(data$age)
data$sex = as.factor(data$sex)
data$bmi = as.numeric(data$bmi)
data$children = as.numeric(data$children)
data$smoker= as.factor(data$smoker)
data$region = as.factor(data$region)
data["log_charges"] = log(data$charges)
head(data)
## 1
regional_insurance = insurance_data
regional_insurance$smoker= as.factor(data$smoker)
regional_insurance$smoker=as.numeric(data$smoker)
regional_insurance$charges = as.numeric(regional_insurance$charges)
regional_insurance = data.frame(regional_insurance %>% group_by(across(c("region"))) %>%
summarise(
age = mean(age),
bmi = mean(bmi),
smoker = sum(smoker),
charges = sum(charges)
))
regional_insurance[
with(regional_insurance, order(regional_insurance$charges, decreasing = TRUE)),
]
smokers = (
filter(insurance_data, smoker == "yes")
)
smokers
non_smokers = (
filter(insurance_data, smoker == "no")
)
non_smokers
smoking_data = insurance_data %>% group_by(across(c("smoker"))) %>%
summarise(
age = mean(age),
bmi = mean(bmi),
charges = sum(charges)
)
smoking_data[
with(smoking_data, order(charges, decreasing = TRUE)),
]
t.test(smokers$charges, non_smokers$charges, alternative = "greater")
## checking for normality
## As BMI is the only continuous variable we check the normality for only bmi
ggplot(data = data, mapping = aes(x = bmi)) +
geom_density(fill = "#FA8072", color = "#C70039") +
theme_bw() +
labs(x = "BMI", y = "Density")
## BMI is normally distributed where the concentration of the data is in
## the center and thinner at the tails.
pricing_model<- lm(charges ~ age + sex + bmi + children +
smoker + region, data = data)
summary(pricing_model)
##4. correlation tests
cor_data = data
for (col in colnames(cor_data)) {
if (is.factor(unlist(cor_data[col]))) {
print(paste(col, " is a factor"))
eval(parse(text = paste("cor_data$", col, " = ", "as.numeric(cor_data$", col, ")", sep = "")))
}
}
## a) charges ~ age
cor_test_age <- cor.test(cor_data$charges, cor_data$age)
cor_test_age
## b) Charges~ BMI
cor_test_BMI <- cor.test(cor_data$charges, cor_data$bmi)
cor_test_BMI
## c) Charges children
cor_test_children<- cor.test(cor_data$charges, cor_data$children)
cor_test_children
## d) Charges smoker
cor_test_smoker<- cor.test(cor_data$charges, cor_data$smoker)
cor_test_smoker
## e) Charges~ Region
cor_test_region<- cor.test(cor_data$charges, cor_data$region)
cor_test_region
## e) Charges~ Region
cor_test_region<- cor.test(cor_data$charges, cor_data$region)
cor_test_region
## 5 GLM model
model_data = data %>% group_by(across(c("age", "region","smoker", "sex"))) %>%
summarise(
log_charges = mean(log_charges),
children = sum(children),
bmi = mean(bmi),
charges = mean(charges)
)
predictor_model = glm(log_charges ~  smoker + sex + age + bmi +
sex:smoker +
region:smoker +
age:smoker +
age:bmi,
data = model_data)
summary(predictor_model)
dropterm(predictor_model, sort = TRUE)
model_plot = ggplot(data = model_data, mapping =  aes(x = fitted(predictor_model), y = residuals(predictor_model)))
model_plot +
geom_point(color = colfunc(1)) +
geom_hline(intercept = mean(residuals(predictor_model)), color = "red") +
theme_bw() +
ggtitle("Residuals vs Fitted") +
labs(x = "Fitted Values", y = "Residuals") +
theme(plot.title = element_text(hjust = 0.5))
prediction_data = data.frame(region = unique(model_data$region),
smoker = c("yes", "yes", "no", "no"),
sex = c("male", "female", "male", "female"),
age = c(35, 50, 40, 19),
bmi = c(23, 30, 27, 37))
prediction_data$sex = as.factor(prediction_data$sex)
prediction_data$smoker = as.factor(prediction_data$smoker)
prediction_data$region = as.factor(prediction_data$region)
predicted_charges = exp(predict.glm(predictor_model, newdata = prediction_data))
predictions = prediction_data
predictions["Estimated Charge"] = predicted_charges
regional_effect = data.frame(region = unique(model_data$region),
smoker = "yes",
sex = "male",
age = 35,
bmi = 25)
regional_effect$smoker = as.factor(regional_effect$smoker)
regional_effect$sex = as.factor(regional_effect$sex)
regional_effect$region = as.factor(regional_effect$region)
regional_predict = exp(predict.glm(predictor_model, newdata = regional_effect))
regional_effect["Estimated Charge"] = regional_predict
write.csv(regional_effect, "regional_prediction.csv")
write.csv(predictions, "predictions.csv")
##Checking for missing values:
which(is.na(data))
##Importing the insurance data:
data <- read.csv(file.choose())
options(max.print = 100000)
data
head(data)
##Converting the categorical variable "smoker" into numerical:
require(plyr)
class(data$smoker)
data$smoker <- revalue(data$smoker, c("yes"="1", "no"="0"))
class(data$smoker)
data$smoker <- revalue(data$smoker, c("yes"=1, "no"=0))
##Converting the categorical variable "smoker" into numerical:
data$smoker = as.factor(data$smoker)
class(data$smoker)
data$smoker = as.numeric(data$smoker)
##Importing the insurance data:
data <- read.csv(file.choose())
options(max.print = 100000)
data
head(data)
## Cleaning the data:
data$age= as.numeric(data$age)
data$sex = as.factor(data$sex)
data$bmi = as.numeric(data$bmi)
data$children = as.numeric(data$children)
data$smoker= as.factor(data$smoker)
data$region = as.factor(data$region)
View(data)
##Checking for missing values:
which(is.na(data))
##Checking which region is best for selling insurance:
x <- aggregate(as.numeric(data$smoker)~as.factor(data$region), FUN = "sum")
x
plot(x)
y <- aggregate(as.numeric(data$charges)~as.factor(data$region), FUN = "sum")
y
## Reading the csv file
insurance_data<- read.csv(file.choose())
## data cleaning
data = insurance_data
data$age= as.numeric(data$age)
data$sex = as.factor(data$sex)
data$bmi = as.numeric(data$bmi)
data$children = as.numeric(data$children)
data$smoker= as.factor(data$smoker)
data$region = as.factor(data$region)
data["log_charges"] = log(data$charges)
head(data)
## 1
regional_insurance = insurance_data
regional_insurance$smoker= as.factor(data$smoker)
regional_insurance$smoker=as.numeric(data$smoker)
regional_insurance$charges = as.numeric(regional_insurance$charges)
regional_insurance = data.frame(regional_insurance %>% group_by(across(c("region"))) %>%
summarise(
age = mean(age),
bmi = mean(bmi),
smoker = sum(smoker),
charges = sum(charges)
))
regional_insurance[
with(regional_insurance, order(regional_insurance$charges, decreasing = TRUE)),
]
View(insurance_data)
## data cleaning
data = insurance_data
data$age= as.numeric(data$age)
data$sex = as.factor(data$sex)
data$bmi = as.numeric(data$bmi)
data$children = as.numeric(data$children)
data$smoker= as.factor(data$smoker)
data$region = as.factor(data$region)
data["log_charges"] = log(data$charges)
head(data)
## 1
regional_insurance = insurance_data
regional_insurance$smoker= as.factor(data$smoker)
regional_insurance$smoker=as.numeric(data$smoker)
regional_insurance$charges = as.numeric(regional_insurance$charges)
regional_insurance = data.frame(regional_insurance %>% group_by(across(c("region"))) %>%
summarise(
age = mean(age),
bmi = mean(bmi),
smoker = sum(smoker),
charges = sum(charges)
))
regional_insurance[
with(regional_insurance, order(regional_insurance$charges, decreasing = TRUE)),
]
View(data)
smokers = (
filter(insurance_data, smoker == "yes")
)
smokers
non_smokers = (
filter(insurance_data, smoker == "no")
)
non_smokers
smoking_data = insurance_data %>% group_by(across(c("smoker"))) %>%
summarise(
age = mean(age),
bmi = mean(bmi),
charges = sum(charges)
)
smoking_data[
with(smoking_data, order(charges, decreasing = TRUE)),
]
View(smoking_data)
View(x)
library(tidyverse)
library(MASS)
quit()
